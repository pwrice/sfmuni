(use 'sfnumi.data)
(use 'sfmuni.data)
(load-schedule-data)
(load-file "sfmuni/data.clj")
(load-file "src/sfmuni/data.clj")
(get-stops)
(use 'sfmuni.data)
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(use 'sfmuni.data)
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(use 'sfmuni.data)
(doc membero)
(doc doc)
(membero doc)
(load-file "src/sfmuni/data.clj")
(use [clojure.core.logic])
(use 'clojure.core.logic)
(partial-map doc)
(membero doc)
(doc membero)
(doc partial-map)
(partial-map)
(use 'clojure.core.logic)
(run* [q] (== q true))
(run* [q] (partial-map {:foo "bar"} q))
(use 'sfmuni.data)
(load-file "src/sfdata/data.clj")
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(use 'sfmuni.data)
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(doc map-partial)
(map-partial doc)
(doc featurec)
(featurec doc)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(get-stops)
(load-file "src/sfmuni/data.clj")
(download-route-config)
(load-file "src/sfmuni/data.clj")
(download-route-config)
(download-route-config "12" "foo.txt")
(download-route-config)
(download-route-config "12" "foo.txt")
(use 'sfmuni.data)
(download-route-config "12" "foo.txt")
(load-file "src/sfmuni/data.clj")
(download-route-config "12" "foo.txt")
(use 'sfmuni.web)
(use 'sfmuni.data)
(load-file "src/sfmuni/data.clj")
(use 'sfmuni.data)
(get-predictions)
(use 'sfmuni.data)
(get-predictions)
(use 'sfmuni.web)
(get-stop-prediction "fo")
(load-file "src/sfmuni/web.clj")
(get-stop-prediction "fo")
(load-file "src/sfmuni/web.clj")
(get-stop-prediction "fo")
(use 'sfmuni.web)
(load-file "src/sfmuni/web.clj")
(get_dummy_prediction_map)
(use 'sfmuni.web)
(get-dummy-prediction-map)
(get-stops-for-stop-name "foo")
(get-url-params-for-stop-maps (get-stops-for-stop-name "foo"))
(load-file "src/sfmuni/web.clj")
(get-url-params-for-stop-maps (get-stops-for-stop-name "foo"))
(get-stop-prediction "foo")
(load-file "src/sfmuni/web.clj")
(get-url-params-for-stop-maps (get-stops-for-stop-name "foo"))
(get-stop-prediction "foo")
(use 'sfmuni.web)
(get-parsed-html "http://www.yelp.com")
(load-file "src/sfmuni/web.clj")
(get-parsed-html "http://www.yelp.com")
(load-file "src/sfmuni/web.clj")
(get-parsed-html "http://www.yelp.com")
(load-file "src/sfmuni/web.clj")
(get-parsed-html "http://www.yelp.com")
(get-stop-prediction "foo")
(get-parsed-html "http://www.yelp.com")
(load-file "src/sfmuni/web.clj")
(get-stop-prediction "foo")
(load-file "src/sfmuni/web.clj")
(get-stop-prediction "foo")
(load-file "src/sfmuni/web.clj")
(get-stop-prediction "foo")
(load-file "src/sfmuni/web.clj")
(get-stop-prediction "foo")
(load-file "src/sfmuni/web.clj")
(get-stop-prediction "foo")
(load-file "src/sfmuni/web.clj")
(get-stop-prediction "foo")
(load-file "src/sfmuni/web.clj")
(def foo ((get-stop-prediction "foo"))
)
(def foo (get-stop-prediction "foo"))
foo
(first foo)
(:content (first (:content (:first foo))))
(:content (first (:content (first foo))))
(-> foo first :content first :content)
(-> foo first :content first :content second)
(-> foo first :content first :content)
(load-file "src/sfmuni/web.clj")
(get-stop-prediction "foo")
(load-file "src/sfmuni/web.clj")
(get-stop-prediction "foo")
